// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_verification/test/application/managers/pin_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_verification/application/usecases/delete_pin_usecase.dart'
    as _i8;
import 'package:flutter_verification/application/usecases/load_pins_usecase.dart'
    as _i5;
import 'package:flutter_verification/application/usecases/save_pin_usecase.dart'
    as _i7;
import 'package:flutter_verification/domain/entities/pin.dart' as _i4;
import 'package:flutter_verification/domain/repositories/pin_repository.dart'
    as _i2;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePinRepository_0 extends _i1.SmartFake implements _i2.PinRepository {
  _FakePinRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PinRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPinRepository extends _i1.Mock implements _i2.PinRepository {
  MockPinRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Pin>> getPins() =>
      (super.noSuchMethod(
            Invocation.method(#getPins, []),
            returnValue: _i3.Future<List<_i4.Pin>>.value(<_i4.Pin>[]),
          )
          as _i3.Future<List<_i4.Pin>>);

  @override
  _i3.Future<void> savePin(
    String? markerId,
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#savePin, [markerId, latitude, longitude]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deletePin(double? latitude, double? longitude) =>
      (super.noSuchMethod(
            Invocation.method(#deletePin, [latitude, longitude]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [LoadPinsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadPinsUseCase extends _i1.Mock implements _i5.LoadPinsUseCase {
  MockLoadPinsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.LatLng>> execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i3.Future<List<_i6.LatLng>>.value(<_i6.LatLng>[]),
          )
          as _i3.Future<List<_i6.LatLng>>);
}

/// A class which mocks [SavePinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePinUseCase extends _i1.Mock implements _i7.SavePinUseCase {
  MockSavePinUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PinRepository get pinRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pinRepository),
            returnValue: _FakePinRepository_0(
              this,
              Invocation.getter(#pinRepository),
            ),
          )
          as _i2.PinRepository);

  @override
  _i3.Future<void> execute(
    String? markerId,
    double? latitude,
    double? longitude,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [markerId, latitude, longitude]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [DeletePinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletePinUseCase extends _i1.Mock implements _i8.DeletePinUseCase {
  MockDeletePinUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PinRepository get pinRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pinRepository),
            returnValue: _FakePinRepository_0(
              this,
              Invocation.getter(#pinRepository),
            ),
          )
          as _i2.PinRepository);

  @override
  _i3.Future<void> execute(double? latitude, double? longitude) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [latitude, longitude]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
