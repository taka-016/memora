// Mocks generated by Mockito 5.4.6 from annotations
// in memora/test/unit/presentation/widgets/password_change_modal_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:memora/application/usecases/reauthenticate_usecase.dart' as _i5;
import 'package:memora/application/usecases/update_password_usecase.dart'
    as _i3;
import 'package:memora/domain/services/auth_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthService_0 extends _i1.SmartFake implements _i2.AuthService {
  _FakeAuthService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [UpdatePasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdatePasswordUseCase extends _i1.Mock
    implements _i3.UpdatePasswordUseCase {
  MockUpdatePasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthService get authService =>
      (super.noSuchMethod(
            Invocation.getter(#authService),
            returnValue: _FakeAuthService_0(
              this,
              Invocation.getter(#authService),
            ),
          )
          as _i2.AuthService);

  @override
  _i4.Future<void> execute({required String? newPassword}) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#newPassword: newPassword}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ReauthenticateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockReauthenticateUseCase extends _i1.Mock
    implements _i5.ReauthenticateUseCase {
  MockReauthenticateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthService get authService =>
      (super.noSuchMethod(
            Invocation.getter(#authService),
            returnValue: _FakeAuthService_0(
              this,
              Invocation.getter(#authService),
            ),
          )
          as _i2.AuthService);

  @override
  _i4.Future<void> execute({required String? password}) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#password: password}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
