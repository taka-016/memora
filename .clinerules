# 開発フロー
1. 新規要求ごとに `doc/todo_list.md` にToDoリストを追加（1タスク=1コミットが理想）。
    - テストケース作成はToDoのタスクには含めない。（TDDの一部として扱う）
    - サンプル:
        > ## ログイン機能
        > - [ ] フォーム画面作成
        >     - [ ] メールアドレス入力欄
        >     - [ ] パスワード入力欄
        >     - [ ] ログインボタン配置
        > - [ ] バリデーション実装
        >     - [ ] メールアドレス形式チェック
        >     - [ ] パスワード長さチェック
2. ToDoリストの各項目に対して、以下のTDDサイクルで開発を進める。
    - Red:
        - まずテストケースを書く。
        - 失敗することを確認する。
    - Green:
        - 必要最小限の実装でテストを通す。
    - Refactor:
        - コードを整理し、リファクタリングする。
        - テストが引き続き通ることを確認する。
        - ToDoリストの該当項目にチェックを入れる。
3. コミットを行う。
    - コミットメッセージは以下の形式とする:
        - `[feat] 対応したToDo項目の概要`（例: `[feat] ログイン機能のフォーム画面作成`）
    - コミット前に必ず `flutter analyze` と `flutter test` を実行し、問題がないことを確認する。

# 開発ルール
## プロジェクト構成
- `lib/` 以下は以下のディレクトリ構成とする:
    - `application/`: ユースケースロジック
    - `domain/`: エンティティ、モデル
    - `infrastructure/`: 外部依存（DB、API）
    - `presentation/`: UI層（Widget、ページ）
    - `main.dart`: エントリーポイント

## 命名規則
- ファイル名・ディレクトリ名: snake_case
- クラス名: UpperCamelCase
- 変数・関数名: lowerCamelCase
- 定数: SCREAMING_SNAKE_CASE

## コードスタイル
- インデントは2スペース
- 行の最大長は120文字
- 文字列は基本的にシングルクォーテーション
- constを積極的に使用する
- 不要なprintはコミット前に削除

## Lint 設定
- flutter_lints パッケージを使用
- analysis_options.yaml で以下を設定:
    - prefer_const_constructors: 常に有効化
    - avoid_print: エラー扱い

## テスト方針
- ユニットテスト: test/に配置
- ディレクトリ構成はlib/と同じにする
- テスト命名はxxx_test.dartとする
- カバレッジ目標: 80%以上

## CI/CD
- コミット前にflutter analyzeとflutter testを必ず実行
- mainブランチにはPull Request経由でのみマージ

## コミットルール
- コミットメッセージは以下形式:
    - [feat] 新機能の概要
    - [fix] 修正内容の概要
    - [refactor] リファクタ内容の概要
    - [docs] ドキュメントの更新内容
    - [test] テストの追加・修正内容
    - [chore] その他の変更

## その他
- ドキュメントコメント（///）は公開関数・クラスには必須
- 非同期処理にはasync/awaitを使用し、thenチェーンは避ける
